// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  passwordSalt   String?

  accounts       Account[]
  sessions       Session[]

  portfolio      Portfolio?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Portfolio {
  id                  String    @id @default(cuid())
  userId              String    @unique
  tag                 String    @unique
  fullName            String
  description         String    @db.Text
  title               String

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  links               Link[]
  workHistories       WorkHistory[]
  educationHistories  EducationHistory[]

  @@index([userId])
}

model Link {
  id                  String    @id @default(cuid())
  type                String
  href                String
  portfolioId         String

  portfolio           Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model WorkHistory {
  id                  String    @id @default(cuid())
  company             String
  title               String
  description         String    @db.Text
  startDate           DateTime
  endDate             DateTime?
  portfolioId         String

  portfolio           Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model EducationHistory {
  id                  String    @id @default(cuid())
  school              String
  degree              String
  major               String?
  description         String    @db.Text
  startDate           DateTime
  endDate             DateTime?
  portfolioId         String

  portfolio           Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}